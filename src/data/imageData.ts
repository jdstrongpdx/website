import IImageData from "../interfaces/IImageData";

const imageData: IImageData[] = [
    {
        src: 'images/FFR/home.png',
        description: 'Fragrance Free Resources Home Page (Admin View)',
        project: "FFR"
    }, {
        src: 'images/FFR/visitorView.png',
        description: 'Visitor view of a Product from FragranceFreeResources.com',
        project: "FFR"
    }, {
        src: 'images/FFR/adminView.png',
        description: 'Administrator view of a Product with an active Review modal.',
        project: "FFR"
    }, {
        src: 'images/FFR/endpoints.png',
        description: 'Spring Boot API endpoints for the FragranceFreeResources web application backend.',
        project: "FFR"
    }, {
        src: 'images/FFR/schema.png',
        description: 'MySql schema created by Spring Boot JPA ODM',
        project: "FFR"
    }, {
        src: 'images/FFR/security.png',
        description: 'Spring Security configuration for the FragranceFreeResources endpoints.',
        project: "FFR"
    }, {
        src: 'images/FFR/lighthouse.png',
        description: 'Google Lighthouse analysis for performance and accessibility of the FragranceFreeResources website.',
        project: "FFR"
    }, {
        src: 'images/LL/persona.png',
        description: 'Development of a Persona in Figma',
        project: "LL"
    }, {
        src: 'images/LL/desktop.png',
        description: 'Development of a highly stylized React website based on a provided styleguide and wireframe.',
        project: "LL"
    }, {
        src: 'images/LL/mobile.png',
        description: 'Development of a multi-part mobile table reservation system using React using a styleguide',
        project: "LL"
    }, {
        src: 'images/LL/journeyMap.png',
        description: 'Development of a Journey Map for a problem statement and persona in Figma',
        project: "LL"
    }, {


        src: 'images/Website/website.png',
        description: 'React Personal Website to demonstrate my projects and skills.',
        project: "Website"
    }, {
        src: 'images/Website/collapsed.png',
        description: 'Dynamically collapsed website view for mobile devices..',
        project: "Website"
    }, {
        src: 'images/Website/projectData.png',
        description: 'Using objects to store data used to generate components throughout the website.',
        project: "Website"
    }, {
        src: 'images/Website/projectCard.png',
        description: 'Dynamically generating Card content based on project data.',
        project: "Website"
    }, {
        src: 'images/Website/card.png',
        description: 'Example Card generated by the ProjectCard component from the project data.',
        project: "Website"
    }, {
        src: 'images/Website/project.png',
        description: 'Use of props data and children to generate project the detail page.',
        project: "Website"
    }, {

        src: 'images/MLB/cover.png',
        description: 'Recreation of an Atari Breakout Game using Unity and Machine Learning to compete against.',
        project: "MLB"
    }, {
        src: 'images/MLB/webGl.png',
        description: 'WebGL deployment of a Unity Atari Breakout clone and Machine Learned model development to play the game.',
        project: "MLB"
    }, {
        src: 'images/MLB/poster.png',
        description: 'Oregon State University Showcase Poster for ML-Breakout Project.',
        project: "MLB"
    }, {
        src: 'images/MLB/github.png',
        description: 'ML-Breakout repository using CI/CD and Pull Requests for code review and testing.',
        project: "MLB"
    }, {
        src: 'images/GCP/flask.png',
        description: 'Flask/Python code for a Backend API endpoint using Auth hosted on GCP AppEngine.',
        project: "GCP"
    }, {
        src: 'images/GCP/auth.png',
        description: 'Using Newman CLI to test user authentication and privileges using JWT and a Spring Security API.',
        project: "GCP"
    }, {
        src: 'images/GCP/dockerNewman.png',
        description: 'Testing a Dockerized Python/Flask API app using Postman Collections before deploying to GCP.',
        project: "GCP"
    }, {
        src: 'images/GCP/datastore.png',
        description: 'Using GCP Datastore to store user avatar image files.',
        project: "GCP"
    }, {
        src: 'images/NetworkMonitor/monitor.png',
        description: 'Server(left) and Client(right) network traffic monitor using Python',
        project: "NetworkMonitor"
    }, {
        src: 'images/NetworkMonitor/server.png',
        description: 'Server view showing the server status, received configurations, and async tests returned to the client.',
        project: "NetworkMonitor"
    }, {
        src: 'images/NetworkMonitor/client.png',
        description: 'Client view showing the client status, configurations, and received test results processed by the server.',
        project: "NetworkMonitor"
    }, {
        src: 'images/IC/home.png',
        description: 'Ideal Conditions App Home Banner.',
        project: "IC"
    }, {
        src: 'images/IC/page.png',
        description: 'Ideal Conditions form and search results.',
        project: "IC"
    }, {
        src: 'images/IC/jsonReturn.png',
        description: 'JSON return from the AWS Lambda function after fetch.',
        project: "IC"
    }, {
        src: 'images/IC/lambda.png',
        description: 'Python code running in an AWS Lambda function to fetch data from the OpenWeatherMap API.',
        project: "IC"
    }, {
        src: 'images/Blockchain/code.png',
        description: 'Multi-threaded Java Blockchain creator & miner',
        project: "Blockchain"
    }, {
        src: 'images/Blockchain/load.png',
        description: 'Ten core processor mining 9 threads for Java Blockchain app.',
        project: "Blockchain"
    }, {
        src: 'images/Gallery/matplot.png',
        description: 'Using wrappers in Python and Matplotlib to compare sorting algorithms.',
        project: "Gallery"
    }, {
        src: 'images/IC/lambda.png',
        description: 'Programming an API Endpoint using AWS Lambda API Gateway in Python.',
        project: "Gallery"
    }, {
        src: 'images/Gallery/snippets.png',
        description: 'Using SnippetsLab to save code snippets or prior work to quickly find function examples.',
        project: "Gallery"
    }, {
        src: 'images/Gallery/desk.png',
        description: 'Using an ergonomic programmable split keyboard to increase productivity and ergonomics.',
        project: "Gallery"
    }, {
        src: 'images/Gallery/books.png',
        description: 'A selection of programming books.',
        project: "Gallery"
    }, {
        src: 'images/Gallery/inductiveProof.jpg',
        description: 'Detailed and organized work - Proof by induction example.',
        project: "Gallery"
    }

]

export default imageData;
